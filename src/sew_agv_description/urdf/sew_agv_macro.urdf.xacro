<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

<!--#######################################################################################################################################-->
<!--include the helpers with fixed parameters-->
<!--#######################################################################################################################################-->
  <xacro:include filename="$(find sew_agv_description)/urdf/materials.urdf.xacro" />


<!--#######################################################################################################################################-->
<!--set some parameters with default values used by the macros (kinematics description, simulation and control)-->
<!--#######################################################################################################################################-->

  <xacro:macro name="sew_agv_macro" params="
    tf_prefix
    generate_ros2_control_tag:=false
    standalone_gazebo:=false
    ros2_control_with_gazebo:=false
    use_fake_hardware:=false
    robot_ip"
  >

<!--#######################################################################################################################################-->
<!--include ros2 control and create an instance if param generate_ros2_control_tag == true and pass necessary params-->
<!--#######################################################################################################################################-->

    <xacro:if value="${generate_ros2_control_tag}">
        <!-- ros2 control include -->
        <xacro:include filename="$(find sew_agv_description)/urdf/sew_agv_ros2_control.urdf.xacro" />
        <!-- ros2 control instance -->
        <xacro:sew_agv_ros2_control
          ros2_control_with_gazebo="${ros2_control_with_gazebo}"
          use_fake_hardware="${use_fake_hardware}"
          tf_prefix="${tf_prefix}"
          agv_ip="${robot_ip}"
        />
    </xacro:if>


<!--#######################################################################################################################################-->
<!--load standard gazebo diff_drive plugin-->
<!--#######################################################################################################################################-->

    <xacro:if value="${standalone_gazebo}">
        <xacro:include filename="$(find sew_agv_description)/urdf/sew_agv_gazebo_macro.urdf.xacro" />
        <xacro:sew_agv_gazebo tf_prefix="${tf_prefix}"/>
    </xacro:if>

<!--#######################################################################################################################################-->
<!--load gazebo hardware plugin for ros2_control diff_drive plugin-->
<!--#######################################################################################################################################-->

    <xacro:if value="${ros2_control_with_gazebo}">
        <xacro:include filename="$(find sew_agv_description)/urdf/sew_agv_ros2_control_gazebo_macro.urdf.xacro" />
        <xacro:sew_ros2_control_gazebo tf_prefix="${tf_prefix}"/>
    </xacro:if>


<!--#######################################################################################################################################-->
<!--define the main kinematic chain with links and joints (using the config-files) PI: 3.14159 PI/2: 1.57079 -->
<!--#######################################################################################################################################-->
    <xacro:materials tf_prefix="${tf_prefix}"/>
    
    
    <!--define non physical footprint joint (used in nav2 to determine robot center on the ground)-->
    <link name="${tf_prefix}base_footprint"/>

    <!--base/ main body fixed relative to the footprint , inertial definitions required due to the use in gazebo-->
    <joint name="${tf_prefix}base_footprint_joint" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0.58"/>
        <axis xyz="0 0 0"/>
        <parent link="${tf_prefix}base_footprint"/>
        <child link="${tf_prefix}base_link"/>
    </joint>
    <link name="${tf_prefix}base_link">
        <inertial>
            <mass value="50"/> <!--in kg reduced due to simulation instabilities at higher weight-->
            <origin rpy="0 0 -0.5" xyz="0 0 0"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_body.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}grey"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/collision/sew_maxo_mts_body.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}red"/>
        </collision>
    </link>

    <!--front wheel / axis should match the rotation axis of the wheel, for simplicity reasons set this to fixed and disable friction in gazebo-->
    <joint name="${tf_prefix}caster_wheel_joint" type="fixed">
        <origin rpy="1.57079 0 0" xyz="0.290 0 -0.56"/>
        <axis xyz="0 0 0"/>
        <parent link="${tf_prefix}base_link"/>
        <child link="${tf_prefix}caster_wheel_link"/>
    </joint>
    <link name="${tf_prefix}caster_wheel_link" type="wheel">
        <inertial>
            <mass value="2"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_front_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}black"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_front_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}red"/>
        </collision>
    </link>

    <!--right back wheel / axis shold match the rotation axis of the wheel-->
    <joint name="${tf_prefix}wheel_right_joint" type="continuous">
        <origin rpy="0 0 -1.57079" xyz="-0.225 -0.2625 -0.48"/>
        <limit effort="100.0" velocity="3.5"/>
        <axis xyz="-1 0 0"/>
        <parent link="${tf_prefix}base_link"/>
        <child link="${tf_prefix}wheel_right_link"/>
    </joint>
    <link name="${tf_prefix}wheel_right_link" type="wheel">
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <mass value="2"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}black"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}red"/>
        </collision>
    </link>

    <!--left back wheel / axis shold match the rotation axis of the wheel-->
    <joint name="${tf_prefix}wheel_left_joint" type="continuous">
        <origin rpy="0 0 1.57079" xyz="-0.225 0.2625 -0.48"/>
        <limit effort="100.0" velocity="3.5"/>
        <axis xyz="1 0 0"/>
        <parent link="${tf_prefix}base_link"/>
        <child link="${tf_prefix}wheel_left_link"/>
    </joint>
    <link name="${tf_prefix}wheel_left_link" type="wheel">
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <mass value="2"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}black"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_wheel.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}red"/>
        </collision>
    </link>

    <!--lidar sensor, required due to the use in gazebo-->
    <joint name="${tf_prefix}lidar_joint" type="fixed">
        <axis xyz="0 0 0"/>
        <origin rpy="0 0 0 " xyz="0.355 0 -0.445"/>
        <parent link="${tf_prefix}base_link"/>
        <child link="${tf_prefix}lidar_link"/>
    </joint>
    <link name="${tf_prefix}lidar_link" type="laser">
        <inertial>
            <mass value="1"/>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_lidar.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="${tf_prefix}yellow"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_agv_description)/meshes/visual/sew_maxo_mts_lidar.stl" scale="0.001 0.001 0.001"/>
            </geometry>
        </collision>
        <material name="${tf_prefix}red"/>
    </link>

  
  </xacro:macro>
</robot>