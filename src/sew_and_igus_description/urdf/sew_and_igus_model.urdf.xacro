<?xml version="1.0"?>

<!--this is the main urdf.xacro file which builds actually the robot model by calling the other macros-->
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="sew-maxo-mts-agv-with-igus-rebel">

<!--#######################################################################################################################################-->
   <!-- import sew-macro, define parameters needed inside the macro and load the macro -->
<!--#######################################################################################################################################-->
    <xacro:include filename="$(find sew_agv_description)/urdf/sew_agv_macro.urdf.xacro"/>

<!-- set parameters defined in sew_agv_macro.urdf.xacro -->
    <xacro:arg name="tf_prefix" default="sew_"/>

    <!-- ros2_control related parameters -->
    <xacro:arg name="robot_ip" default="NaN" />
    <xacro:arg name="generate_ros2_control_tag" default="false" />


    <!-- simulation related parameters -->
    <xacro:arg name="use_fake_hardware" default="false" />
    <xacro:arg name="ros2_control_with_gazebo" default="false" />
    <xacro:arg name="standalone_gazebo" default="false" />
 
<!-- call the main macro by passing above instanced parameters to build the arm -->
   
    <xacro:sew_agv_macro
        tf_prefix="$(arg tf_prefix)"
        use_fake_hardware="$(arg use_fake_hardware)"
        robot_ip="$(arg robot_ip)"
        generate_ros2_control_tag="$(arg generate_ros2_control_tag)"
        standalone_gazebo="$(arg standalone_gazebo)"
        ros2_control_with_gazebo="$(arg ros2_control_with_gazebo)"
        >
    </xacro:sew_agv_macro>

<!--#######################################################################################################################################-->
   <!-- add adapter plate and cabinet -->
<!--#######################################################################################################################################-->      
    <xacro:include filename="$(find sew_and_igus_description)/urdf/materials.urdf.xacro" />  
    <xacro:materials tf_prefix=""/>

    <joint name="sew_to_adapterplate" type="fixed">
        <origin rpy="0 0 1.57" xyz="-0.29 0 0"/>
        <axis xyz="0 0 0"/>
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="adapterplate_link"/>
    </joint>
    <link name="adapterplate_link">
        <inertial>
            <mass value="2"/> <!--in kg reduced due to simulation instabilities at higher weight-->
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_and_igus_description)/meshes/visual/adapter_plate.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_and_igus_description)/meshes/collision/adapter_plate.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="red"/>
        </collision>
    </link>

    <joint name="adapterplate_to_cabinet" type="fixed">
        <origin rpy="0 0 0" xyz="-0.095 -0.005 0.023"/>
        <axis xyz="0 0 0"/>
        <parent link="adapterplate_link"/>
        <child link="cabinet_link"/>
    </joint>
    <link name="cabinet_link">
        <inertial>
            <mass value="3"/> <!--in kg reduced due to simulation instabilities at higher weight-->
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/> <!--not realistic!-->
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_and_igus_description)/meshes/visual/schaltschrank.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find sew_and_igus_description)/meshes/collision/schaltschrank.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="red"/>
        </collision>
    </link>


<!--#######################################################################################################################################-->
   <!-- import igus-macro, define parameters needed inside the macro and load the macro -->
<!--#######################################################################################################################################-->  
    <xacro:include filename="$(find irc_ros_description)/urdf/robots/igus_rebel_6dof.macro.xacro" />

<!-- set parameters defined in igus_rebel_6dof.macro.xacro-->
    <xacro:arg name="prefix" default="igus_" />
    <xacro:arg name="continuous_last_joint" default="false" />
    <xacro:arg name="rebel_version" default="01" />
    <xacro:arg name="hardware_protocol" default="gazebo" />


<!-- call the main macro by passing above instanced parameters to build the arm -->
    <xacro:igus_rebel_6dof
        prefix="$(arg prefix)"
        continuous_last_joint="$(arg continuous_last_joint)"
        rebel_version="'$(arg rebel_version)'"
        hardware_protocol="$(arg hardware_protocol)"
        >
    </xacro:igus_rebel_6dof>


<!-- call the depth camera sensor plugin (mounted on tcp od the igus robot)-->
    <xacro:include filename="$(find sew_and_igus_description)/urdf/gazebo_depth_camera_macro.urdf.xacro" />
    <xacro:igus_depth_camera_gazebo prefix="$(arg prefix)"/>

<!--#######################################################################################################################################-->
   <!-- joint which connects the sew agv and the igus arm -->
<!--#######################################################################################################################################-->  

  <joint name="adapterplate_to_$(arg prefix)base" type="fixed">
    <parent link="adapterplate_link" />      
    <child link = "$(arg prefix)base_link" />   
    <origin xyz="0.19 -0.015 0.023" rpy="0 0 1.57" />   
  </joint>

</robot>

